#include <iostream>
#include <sstream>
#include <string>
#include <opencv2/highgui.hpp>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;
RNG rng(29292);
const int FRAME_WIDTH = 640;
const int FRAME_HEIGHT = 480;
Mat cannied;
Mat src;
int H_MIN = 0;
int H_MAX = 256;
int S_MIN = 0;
int S_MAX = 256;
int V_MIN = 0;
int V_MAX = 256;
int type_of_thresh;

/*void houghit(int, void*){
 vector<Vec4i> lines;
  Mat lines_drawing = Mat::zeros(src.rows, src.cols, src.type());
  HoughLinesP(cannied, lines, 1, CV_PI/180, hough_thresh, hough_min_length, hough_max_gap);
  for( size_t i = 0; i < lines.size(); i++ )
  {
    Vec4i l = lines[i];
    line( lines_drawing, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255)), 3, CV_AA);
    //cout << "Line #" << i+1 << "(" << l[0] << ", " << l[1] << ") and (" << l[2] << ", " << l[3] << ")." << endl;
  }
   imshow("Lines (7)", lines_drawing);
   cout << lines.size() << endl;

}*/
struct WidthAndHeight{
	int width;
	int height;
};

int DistFormula(Point point_a, Point point_b){
	return sqrt((point_a.x-point_b.x)*(point_a.x-point_b.x)+(point_a.y-point_b.y)*(point_a.y-point_b.y));
}

WidthAndHeight CalcWidthAndHeight(Point point_one, Point point_two, Point point_three){
	WidthAndHeight result;
	
	int length_one = DistFormula(point_one, point_two);
	int length_two = DistFormula(point_two, point_three);

	if(length_one > length_two){
		result.width = length_one;
		result.height = length_two;
	}else{ //length_one is < length_two
		result.width = length_two;
		result.height = length_one;
	}
	return result;
}
void trackbarCallback(int, void*){
	//doesn't need to do anything since the trackbars just change a global value
}
void createTrackbars(){
	namedWindow("HSV adjust", 0);
	createTrackbar("0: HSV | 1: RGB | 2: Gray", "HSV adjust", &type_of_thresh, 2, trackbarCallback);
	createTrackbar("H_MIN", "HSV adjust", &H_MIN, H_MAX, trackbarCallback);
	createTrackbar("H_MAX", "HSV adjust", &H_MAX, H_MAX, trackbarCallback);
	createTrackbar("S_MIN", "HSV adjust", &S_MIN, H_MAX, trackbarCallback);
	createTrackbar("S_MAX", "HSV adjust", &S_MAX, H_MAX, trackbarCallback);
	createTrackbar("V_MIN", "HSV adjust", &V_MIN, H_MAX, trackbarCallback);
	createTrackbar("V_MAX", "HSV adjust", &V_MAX, H_MAX, trackbarCallback);
	
}

int main(int argc, char* argv[]){
   Mat blurred;
   Mat erodeElement;
   Mat dilateElement;
   Mat thresh;
   Mat color_converted;
   VideoCapture capture;
   capture.open(1);
     capture.set(CV_CAP_PROP_FRAME_WIDTH, FRAME_WIDTH);
   capture.set(CV_CAP_PROP_FRAME_HEIGHT,FRAME_HEIGHT);
   createTrackbars();
   while(1){
	   capture.read(src);
	   imshow("Source (1)", src);
	   color_converted.create(src.size(), src.type());
           switch(type_of_thresh){
		case 0:
			cvtColor(src, color_converted, COLOR_BGR2HSV);
			break;
		case 1:
			src.copyTo(color_converted);
			break;
		case 2:
			cvtColor(src, color_converted, COLOR_BGR2GRAY);

	   } 
	   imshow("Converted (2)", color_converted);
	  
	
	   inRange(color_converted, Scalar(H_MIN, S_MIN, V_MIN), Scalar(H_MAX, S_MAX, V_MAX), thresh);
		imshow("Thresh (3)", thresh);
	    erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
	    //dilate with larger element so make sure object is nicely visible
	   dilateElement = getStructuringElement( MORPH_RECT,Size(8, 8));
	   erode(thresh, thresh, erodeElement);
	   erode(thresh, thresh, erodeElement);
	   dilate(thresh, thresh, dilateElement);
	   dilate(thresh, thresh, dilateElement);
	   imshow("Morphops (4)", thresh);
	
	   vector<vector<Point> > contours;
	   vector<Vec4i> hierarchy;
	
		findContours(thresh, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );
	
		vector<RotatedRect> minRect(contours.size());
		for(int i = 0; i < contours.size(); i++){
			minRect[i] = minAreaRect(Mat(contours[i]));
		
		}
	
		Mat box_drawings = Mat::zeros(thresh.size(), thresh.type());
		
	
		for( int i = 0; i< contours.size(); i++ ){
	       		Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
		       // contour
		       drawContours( box_drawings, contours, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
		       // rotated rectangle
		       Point2f rect_points[4]; minRect[i].points( rect_points );
			for( int j = 0; j < 4; j++ ){
	          		line( box_drawings, rect_points[j], rect_points[(j+1)%4], color, 1, 8 );
//				cout << "point "  << j+1 << ": " << rect_points[j] << endl;
				
			}
			WidthAndHeight box_measurements = CalcWidthAndHeight(rect_points[0], rect_points[1], rect_points[2]);
			if(box_measurements.width > 100){
//				printf("width is %d\nheight is %d\n", box_measurements.width, box_measurements.height);
				double depth = (717*8.5) / box_measurements.height;
				char buffer[50];
				sprintf(buffer, "%.2f", depth);
				putText(box_drawings, buffer, Point(0, 60), 2, 2, Scalar(255, 0, 255), 2);
			}
		 }


	      imshow("Boxes (5)", box_drawings);

		int c = waitKey(50);
		if((char)c == 27){
			break;
		}
	}
 /* Canny(thresh, cannied, 50, 150, 3); 
  imshow("Canny (6)", cannied);
    namedWindow("Hough Params", CV_WINDOW_AUTOSIZE);
    createTrackbar("Hough Thresh: ", "Hough Params", &hough_thresh, 250, houghit);
    createTrackbar("Hough Min Length: ", "Hough Params", &hough_min_length, 150, houghit);
    createTrackbar("Hough Max Gap: ", "Hough Params", &hough_max_gap, 100, houghit);
   houghit(0, 0);
waitKey(); 
   vector<vector<Point> > contours;
   vector<Vec4i> hierarchy;

   findContours(thresh, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );
   
    vector<vector<Point> >hull( contours.size() );
   for( int i = 0; i < contours.size(); i++ )
      {  convexHull( Mat(contours[i]), hull[i], false ); }

   /// Draw contours + hull results
   Mat drawing = Mat::zeros( thresh.size(), CV_8UC3 );
   for( int i = 0; i< contours.size(); i++ )
      {
        Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
        drawContours( drawing, contours, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
        drawContours( drawing, hull, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
      }
   
  imshow("contours/hull", drawing);*/
  return 0;

}
